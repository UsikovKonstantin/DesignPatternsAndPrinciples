using _01._Strategy;
using _01._Strategy.ConcreteStrategies;

// Стратегия (Strategy)

/*
Паттерн Стратегия (Strategy) представляет шаблон проектирования, который определяет 
	набор алгоритмов, инкапсулирует каждый из них и обеспечивает их взаимозаменяемость. 
	В зависимости от ситуации мы можем легко заменить один используемый алгоритм другим. 
	При этом замена алгоритма происходит независимо от объекта, который использует данный алгоритм.

Когда использовать стратегию?
	Когда есть несколько родственных классов, которые отличаются поведением. 
		Можно задать один основной класс, а разные варианты поведения вынести в отдельные классы.
	Когда необходимо обеспечить выбор из нескольких вариантов алгоритмов, 
		которые можно легко менять в зависимости от условий
	Когда необходимо менять поведение объектов на стадии выполнения программы
	Когда класс, применяющий определенную функциональность, ничего не должен знать о ее реализации
*/

Navigator navigator = new Navigator(10, new Car());
navigator.MakeRoute();

navigator.Transport = new Bicycle();
navigator.MakeRoute();